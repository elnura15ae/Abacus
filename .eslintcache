[{"C:\\Users\\elnur\\Brain training\\abacus\\src\\index.js":"1","C:\\Users\\elnur\\Brain training\\abacus\\src\\App.js":"2","C:\\Users\\elnur\\Brain training\\abacus\\src\\pages\\Methode.js":"3","C:\\Users\\elnur\\Brain training\\abacus\\src\\pages\\Home.js":"4","C:\\Users\\elnur\\Brain training\\abacus\\src\\components\\NavigationBar.js":"5","C:\\Users\\elnur\\Brain training\\abacus\\src\\pages\\ArticleDeatails.js":"6","C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\index.js":"7","C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\SorobanGenerator.js":"8","C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\Simple.js":"9","C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\helpers.js":"10"},{"size":447,"mtime":1612517332511,"results":"11","hashOfConfig":"12"},{"size":2495,"mtime":1612517408989,"results":"13","hashOfConfig":"12"},{"size":960,"mtime":1612448592084,"results":"14","hashOfConfig":"12"},{"size":158,"mtime":1612516783004,"results":"15","hashOfConfig":"12"},{"size":449,"mtime":1612447241201,"results":"16","hashOfConfig":"12"},{"size":460,"mtime":1612440099771,"results":"17","hashOfConfig":"12"},{"size":567,"mtime":1612517294182,"results":"18","hashOfConfig":"12"},{"size":1743,"mtime":1612517311683,"results":"19","hashOfConfig":"12"},{"size":5587,"mtime":1612517302008,"results":"20","hashOfConfig":"12"},{"size":384,"mtime":1612517285568,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"6myi3g",{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\elnur\\Brain training\\abacus\\src\\index.js",["46"],"C:\\Users\\elnur\\Brain training\\abacus\\src\\App.js",["47","48"],"C:\\Users\\elnur\\Brain training\\abacus\\src\\pages\\Methode.js",[],["49","50"],"C:\\Users\\elnur\\Brain training\\abacus\\src\\pages\\Home.js",[],"C:\\Users\\elnur\\Brain training\\abacus\\src\\components\\NavigationBar.js",[],"C:\\Users\\elnur\\Brain training\\abacus\\src\\pages\\ArticleDeatails.js",["51"],"import React from 'react'\r\nimport {useParams} from 'react-router-dom'\r\n\r\n\r\nexport default function ArticleDeatails({single}) {\r\n    let {id} = useParams()\r\n    return (\r\n        <div>\r\n            <h1>LA MÃ‰THODE- MENTAL MATH</h1>\r\n            {/* <h2>Methode ID:{id}</h2> */}\r\n            {/* {console.log(sigle)} */}\r\n            <h3 style={{'display':'block'}}>Article TITLE: {single.title}</h3>\r\n            <p>{single.body}</p>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\index.js",[],"C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\SorobanGenerator.js",["52"],"import Simple from './Simple'\r\nimport { ArraySum } from './helpers';\r\n\r\nexport default class {\r\n    constructor (config) {\r\n        this.config = config;\r\n        this.examples = [];\r\n    }\r\n\r\n    log (data) {\r\n        if (this.config.debug || null) {\r\n            console.log(data)\r\n        }\r\n    }\r\n\r\n    generateSimpleExamples () {\r\n        const start = new Date().getTime();\r\n        let simple = new Simple(this.config);\r\n        let exmples = Array.from({ length: this.config.examples || 1 }, () => 0);\r\n        for (let key in exmples) {\r\n            exmples[key] = simple.generate_numbers();\r\n        }\r\n\r\n        this.example = exmples;\r\n        const end = new Date().getTime();\r\n        this.log(`Simple: ${this.config.topic_number}, Time complile: ${(end - start)/1000}s`)\r\n        // this.log(this.getArray());\r\n        this.log(this.getString());\r\n    }\r\n\r\n    getArray () {\r\n        let exmples = Array.from({ length: this.config.examples || 1 }, () => {\r\n            return {\r\n                example: [],\r\n                sum: 0\r\n            }\r\n        });\r\n        for (let key in exmples) {\r\n            exmples[key].example = this.example[key];\r\n            exmples[key].sum = ArraySum(this.example[key]);\r\n        }\r\n        return exmples;\r\n    }\r\n\r\n    getString () {\r\n        let exmples = Array.from({ length: this.config.examples || 1 }, () => 0);\r\n        for (let key in this.example) {\r\n            let actions = ''\r\n            for (let ex in this.example[key]) {\r\n                actions += this.example[key][ex] > 0 ? `+${ this.example[key][ex] }` : this.example[key][ex]\r\n            }\r\n            exmples[key] = `${ actions }=${ ArraySum(this.example[key]) }`;\r\n        }\r\n        return exmples;\r\n    }\r\n}","C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\Simple.js",["53"],"import { ArrayRandom, Range, ArraySum } from './helpers'\r\n\r\nclass Simple {\r\n    constructor (config) {\r\n        this.actions_length = config.actions_length + 1;\r\n        this.topic_number = config.topic_number;\r\n        this.digit = config.digit || 1;            \r\n        this.exceptions = config.exceptions;\r\n        this.rangexy = (start, end) => Array.from({ length: (end + 1 - start) }, (v, k) => k + start);\r\n        this.allowNumbers = this.rangexy(0,this.topic_number);\r\n    }\r\n\r\n    /**\r\n     * Method generates number\r\n     */\r\n    __generate_number () {\r\n        let minNumber = Math.pow(10, this.digit - 1)\r\n        let maxNumber = this.__maxNumber()\r\n        let array = []\r\n\r\n        array = array.concat(this.rangexy(minNumber,maxNumber));\r\n        array = array.concat(this.rangexy(-maxNumber, -minNumber));\r\n\r\n        let newArrat = array.filter((item) => {\r\n            return this.__exceptionNumbersOfNumber(item);\r\n        })\r\n\r\n        return ArrayRandom(newArrat);\r\n    }\r\n\r\n    __exceptionNumbersOfNumber (number) {\r\n        let str = ''+(Math.abs(number));\r\n        let len = str.length;\r\n        let state = true;\r\n        for (let i = 0; i < len; i++) {\r\n            let num = parseInt(str[i])\r\n            if (this.allowNumbers.indexOf(num) === -1) {\r\n                state = false;\r\n                break;\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n\r\n    __maxNumber () {\r\n        let num = 1;\r\n        for (let i = 1; i < this.digit; i++) {\r\n            num += Math.pow(10, this.digit - i);\r\n        }\r\n        return this.topic_number * num;\r\n    }\r\n\r\n\r\n    /**\r\n     * Method generates number with given exception\r\n     * @param previous_number \r\n     */\r\n    __generate_with_given_exception (previous_number) {\r\n        let repeat_flag = true;\r\n        let previous_number_string = ''+(Math.abs(previous_number));\r\n        let operator_first;\r\n        let operator_third;\r\n        let operator_third_revert;\r\n        let new_number;\r\n                \r\n        while (repeat_flag) {\r\n            repeat_flag = false;\r\n            new_number = this.__generate_number();\r\n            let new_number_string = ''+(Math.abs(new_number));\r\n\r\n            if (previous_number === 0) break;\r\n            \r\n            operator_first = previous_number > 0 ? '' : '-';\r\n            operator_third = new_number > 0 ? '+' : '-';\r\n            operator_third_revert = new_number > 0 ? '-' : '+';\r\n            for(let i = 0; i < this.digit; i++) {\r\n                let action = operator_first + previous_number_string[i] + operator_third + new_number_string[i];\r\n                let action_revert = operator_first + previous_number_string[i] + operator_third_revert + new_number_string[i];\r\n                \r\n                if (this.exceptions.includes(action)) {\r\n                    repeat_flag = true;\r\n                } else if (this.exceptions.includes(action_revert)) {\r\n                    repeat_flag = true;\r\n                } else {\r\n                    new_number = -new_number;\r\n                }\r\n                if (repeat_flag) break;\r\n                // console.log(previous_number, new_number, action, action_revert);\r\n            }\r\n        }\r\n        \r\n        return new_number;\r\n    }\r\n\r\n    /**\r\n     * Method checks intermediate sum of two numbers\r\n     * @param previous_number \r\n     */\r\n    __generate_number_with_given_intermediate_sum (sum, previous_number) {\r\n        let new_number;\r\n        let intermediate_sum_limit = this.__maxNumber();\r\n        let min_sum_limit = Math.pow(10, this.digit - 1)\r\n        let topic_numbers_sum_limit = false\r\n        if (this.digit === 1) {\r\n            if (this.topic_number <= 4 && this.digit === 1) {\r\n                intermediate_sum_limit = this.topic_number;\r\n            }\r\n            else {\r\n                intermediate_sum_limit = 9;\r\n            }\r\n        }\r\n        while (true) {\r\n            if (this.exceptions || null) {\r\n                new_number = this.__generate_with_given_exception(previous_number);\r\n            }\r\n            else {\r\n                new_number = this.__generate_number();\r\n            }\r\n            \r\n            let intermediate_sum = parseInt(sum) + parseInt(new_number);\r\n\r\n            if (this.topic_number <= 4) {\r\n                topic_numbers_sum_limit = !this.__exceptionNumbersOfNumber(intermediate_sum);\r\n            }\r\n            \r\n            if (intermediate_sum >= min_sum_limit && intermediate_sum <= intermediate_sum_limit && !topic_numbers_sum_limit) {\r\n                break;\r\n            }\r\n        }\r\n            \r\n        return new_number\r\n    }\r\n\r\n    /**\r\n     * Method generates list of numbers\r\n     */\r\n    generate_numbers () {\r\n        let list_of_numbers\r\n        while (true) {\r\n            list_of_numbers = Array.from({ length: this.actions_length }, () => 0);\r\n            for (let task_index in list_of_numbers) {\r\n                let previous_number = task_index > 0 ? list_of_numbers[task_index - 1] : 0;\r\n                let new_number = this.__generate_number_with_given_intermediate_sum(ArraySum(list_of_numbers), previous_number);\r\n                if (new_number !== 0) {\r\n                    list_of_numbers[task_index] = new_number;\r\n                } else {\r\n                    list_of_numbers[task_index] = previous_number;\r\n                }\r\n            }\r\n                \r\n            let sum = ArraySum(list_of_numbers);\r\n            if (sum > 0 && sum <= this.__maxNumber()) {\r\n                break;\r\n            }\r\n        }\r\n        return list_of_numbers;\r\n    }\r\n}\r\n\r\nexport default Simple","C:\\Users\\elnur\\Brain training\\abacus\\src\\abacusRules\\helpers.js",[],{"ruleId":"54","severity":1,"message":"55","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":24},{"ruleId":"54","severity":1,"message":"58","line":5,"column":3,"nodeType":"56","messageId":"57","endLine":5,"endColumn":9},{"ruleId":"54","severity":1,"message":"59","line":7,"column":3,"nodeType":"56","messageId":"57","endLine":7,"endColumn":7},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"54","severity":1,"message":"64","line":6,"column":10,"nodeType":"56","messageId":"57","endLine":6,"endColumn":12},{"ruleId":"65","severity":1,"message":"66","line":4,"column":1,"nodeType":"67","endLine":56,"endColumn":2},{"ruleId":"54","severity":1,"message":"68","line":1,"column":23,"nodeType":"56","messageId":"57","endLine":1,"endColumn":28},"no-unused-vars","'SorobanGenerator' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Link' is defined but never used.","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"'id' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","'Range' is defined but never used.","no-global-assign","no-unsafe-negation"]